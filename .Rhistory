)
)
)
)
)
)
server <- shinyServer(
function(input, output){
output$maksimal <- renderInfoBox({
infoBox(title = "maksimal",
value = maksimal,
subtitle = "Kematian Tertinggi Per Kasus",
color = "red",
fill = TRUE)
})
output$minimal <- renderInfoBox({
infoBox(title = "minimal",
value = minimal,
subtitle = "Kematian Terendah Per Kasus",
color = "green",
fill = TRUE)
})
output$Rata_Rata <- renderInfoBox({
infoBox(title = "Rata Rata",
value = rata%/%1,
subtitle = "Rata Rata Kematian Per Kasus",
color = "blue",
fill = TRUE)
})
output$topdisaster <- renderDataTable({
datatable(topdisaster)
})
wordcloud(corpus.clean,min.freq = 4,max.words=100,random.order=F,colors=brewer.pal(8,"Dark2"))
review_combine<-cbind(covidata$text)
par(mar=rep(3,4))
a<- barplot(colSums(s),col=rainbow(10),ylab='count',main='sentiment analisis')
bagan <- a
}
)
shinyApp(ui = ui, server)
covidata
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(DT)
library(wordcloud)
library(tm) #membersihkan data
library(vroom) #load dataset
library(here) #menyimpan dataset
library(tm)
library(RTextTools)
#library yang terdapat sebuah algoritma naivebayes
library(e1071)
library(dplyr)
library(caret)
library(wordcloud)
library(e1071) #naive bayes
library(caret) #klasifikasi data
library(syuzhet) #fungsi get_nrc_sentiment
covidata <- read.csv("D:/Code/R STUDIO/PDS/finalSentimentdata2.csv",stringsAsFactors = FALSE)
#digunakan untuk mengeset variabel cloumn text menjadi char
review <-as.character(covidata$text)
#Calls the NRC sentiment dictionary to calculate the presence of eight different emotions and their corresponding valence in a text file.
s<-get_nrc_sentiment(review)
ui <- shinyUI(
dashboardPagePlus(
skin = "black-light",
title = "Covid",
dashboardHeaderPlus(
title = "Covid"
),
dashboardSidebar(
sidebarMenu(
menuItem(
text = "Prak DS",
tabName = "page1",
badgeColor = "green"
)
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "page1",
fluidRow(
boxPlus(
title = "Kesimpulan Data",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 12,
infoBoxOutput(
outputId = "maksimal",
width = 4
),
infoBoxOutput(
outputId = "minimal",
width = 4
),
infoBoxOutput(
outputId = "Rata_Rata",
width = 4
)
)
),
fluidRow(
boxPlus(
title = "DAFTAR BENCANA PENYEBAB KEMATIAN TERTINGGI TAHUN 2000 - 2020",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 3,
height = "600px",
dataTableOutput(
outputId = "topdisaster"
)
),
boxPlus(
title = "Graph",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 9,
height = "600px",
plotlyOutput(
outputId = "graph"
)
)
)
)
)
)
)
)
server <- shinyServer(
function(input, output){
output$maksimal <- renderInfoBox({
infoBox(title = "maksimal",
value = maksimal,
subtitle = "Kematian Tertinggi Per Kasus",
color = "red",
fill = TRUE)
})
output$minimal <- renderInfoBox({
infoBox(title = "minimal",
value = minimal,
subtitle = "Kematian Terendah Per Kasus",
color = "green",
fill = TRUE)
})
output$Rata_Rata <- renderInfoBox({
infoBox(title = "Rata Rata",
value = rata%/%1,
subtitle = "Rata Rata Kematian Per Kasus",
color = "blue",
fill = TRUE)
})
output$topdisaster <- renderDataTable({
datatable(topdisaster)
})
set.seed(20)
covidata<-covidata[sample(nrow(covidata)),]
covidata<-covidata[sample(nrow(covidata)),]
glimpse(covidata)
corpus<-Corpus(VectorSource(covidata$text))
corpus
inspect(corpus[1:10])
#fungsinya untuk membersihkan data data yang tidak dibutuhkan
corpus.clean<-corpus%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm<-DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10,1:20])
covidata.train<-covidata[1:50,]
covidata.test<-covidata[51:100,]
dtm.train<-dtm[1:50,]
dtm.test<-dtm[51:100,]
corpus.clean.train<-corpus.clean[1:50]
corpus.clean.test<-corpus.clean[51:100]
dim(dtm.train)
fivefreq<-findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb<-DocumentTermMatrix(corpus.clean.train,control = list(dictionary=fivefreq))
dtm.test.nb<-DocumentTermMatrix(corpus.clean.test,control = list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y<-ifelse(x>0,1,0)
y<-factor(y,levels=c(0,1),labels=c("no","yes"))
y
}
trainNB<-apply(dtm.train.nb,2,convert_count)
testNB<-apply(dtm.test.nb,1,convert_count)
wordcloud(corpus.clean,min.freq = 4,max.words=100,random.order=F,colors=brewer.pal(8,"Dark2"))
review_combine<-cbind(covidata$text)
par(mar=rep(3,4))
a<- barplot(colSums(s),col=rainbow(10),ylab='count',main='sentiment analisis')
bagan <- a
}
)
shinyApp(ui = ui, server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(DT)
library(wordcloud)
library(tm) #membersihkan data
library(vroom) #load dataset
library(here) #menyimpan dataset
library(tm)
library(RTextTools)
#library yang terdapat sebuah algoritma naivebayes
library(e1071)
library(dplyr)
library(caret)
library(wordcloud)
library(e1071) #naive bayes
library(caret) #klasifikasi data
library(syuzhet) #fungsi get_nrc_sentiment
covidata <- read.csv("D:/Code/R STUDIO/PDS/finalSentimentdata2.csv",stringsAsFactors = FALSE)
#digunakan untuk mengeset variabel cloumn text menjadi char
review <-as.character(covidata$text)
#Calls the NRC sentiment dictionary to calculate the presence of eight different emotions and their corresponding valence in a text file.
s<-get_nrc_sentiment(review)
ui <- shinyUI(
dashboardPagePlus(
skin = "black-light",
title = "Covid",
dashboardHeaderPlus(
title = "Covid"
),
dashboardSidebar(
sidebarMenu(
menuItem(
text = "Prak DS",
tabName = "page1",
badgeColor = "green"
)
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "page1",
fluidRow(
boxPlus(
title = "Kesimpulan Data",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 12,
infoBoxOutput(
outputId = "maksimal",
width = 4
),
infoBoxOutput(
outputId = "minimal",
width = 4
),
infoBoxOutput(
outputId = "Rata_Rata",
width = 4
)
)
),
fluidRow(
boxPlus(
title = "DAFTAR BENCANA PENYEBAB KEMATIAN TERTINGGI TAHUN 2000 - 2020",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 3,
height = "600px",
dataTableOutput(
outputId = "topdisaster"
)
),
boxPlus(
title = "Graph",
closable = TRUE,
enable_label = TRUE,
label_status = "danger",
status = "primary",
solidHeader = FALSE,
collapsible = TRUE,
width = 9,
height = "600px",
plotlyOutput(
outputId = "graph"
)
)
)
)
)
)
)
)
server <- shinyServer(
function(input, output){
output$maksimal <- renderInfoBox({
infoBox(title = "maksimal",
value = maksimal,
subtitle = "Kematian Tertinggi Per Kasus",
color = "red",
fill = TRUE)
})
output$minimal <- renderInfoBox({
infoBox(title = "minimal",
value = minimal,
subtitle = "Kematian Terendah Per Kasus",
color = "green",
fill = TRUE)
})
output$Rata_Rata <- renderInfoBox({
infoBox(title = "Rata Rata",
value = rata%/%1,
subtitle = "Rata Rata Kematian Per Kasus",
color = "blue",
fill = TRUE)
})
output$topdisaster <- renderDataTable({
datatable(topdisaster)
})
set.seed(20)
covidata<-covidata[sample(nrow(covidata)),]
covidata<-covidata[sample(nrow(covidata)),]
glimpse(covidata)
corpus<-Corpus(VectorSource(covidata$text))
corpus
inspect(corpus[1:10])
#fungsinya untuk membersihkan data data yang tidak dibutuhkan
corpus.clean<-corpus%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm<-DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10,1:20])
covidata.train<-covidata[1:50,]
covidata.test<-covidata[51:100,]
dtm.train<-dtm[1:50,]
dtm.test<-dtm[51:100,]
corpus.clean.train<-corpus.clean[1:50]
corpus.clean.test<-corpus.clean[51:100]
dim(dtm.train)
fivefreq<-findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb<-DocumentTermMatrix(corpus.clean.train,control = list(dictionary=fivefreq))
dtm.test.nb<-DocumentTermMatrix(corpus.clean.test,control = list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y<-ifelse(x>0,1,0)
y<-factor(y,levels=c(0,1),labels=c("no","yes"))
y
}
trainNB<-apply(dtm.train.nb,2,convert_count)
testNB<-apply(dtm.test.nb,1,convert_count)
wordcloud(corpus.clean,min.freq = 4,max.words=100,random.order=F,colors=brewer.pal(8,"Dark2"))
review_combine<-cbind(covidata$text)
par(mar=rep(3,4))
a<- barplot(colSums(s),col=rainbow(10),ylab='count',main='sentiment analisis')
bagan <- a
}
)
shinyApp(ui = ui, server)
View(kematian)
View(kematian)
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(DT)
library(wordcloud)
library(tm) #membersihkan data
library(vroom) #load dataset
library(here) #menyimpan dataset
library(tm)
library(RTextTools)
#library yang terdapat sebuah algoritma naivebayes
library(e1071)
library(dplyr)
library(caret)
covidata <- read_csv("D:/Code/R STUDIO/PDS/finalSentimentdata2.csv")
set.seed(20)
covidata<-covidata[sample(nrow(covidata)),]
covidata<-covidata[sample(nrow(covidata)),]
glimpse(covidata)
corpus<-Corpus(VectorSource(covidata$text))
corpus
inspect(corpus[1:10])
#fungsinya untuk membersihkan data data yang tidak dibutuhkan
corpus.clean<-corpus%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords,stopwords(kind="en"))%>%
tm_map(stripWhitespace)
dtm<-DocumentTermMatrix(corpus.clean)
inspect(dtm[1:10,1:20])
covidata.train<-covidata[1:50,]
covidata.test<-covidata[51:100,]
dtm.train<-dtm[1:50,]
dtm.test<-dtm[51:100,]
corpus.clean.train<-corpus.clean[1:50]
corpus.clean.test<-corpus.clean[51:100]
dim(dtm.train)
fivefreq<-findFreqTerms(dtm.train,5)
length(fivefreq)
dtm.train.nb<-DocumentTermMatrix(corpus.clean.train,control = list(dictionary=fivefreq))
dtm.test.nb<-DocumentTermMatrix(corpus.clean.test,control = list(dictionary=fivefreq))
dim(dtm.test.nb)
convert_count <- function(x){
y<-ifelse(x>0,1,0)
y<-factor(y,levels=c(0,1),labels=c("no","yes"))
y
}
trainNB<-apply(dtm.train.nb,2,convert_count)
testNB<-apply(dtm.test.nb,1,convert_count)
wordcloud(corpus.clean,min.freq = 4,max.words=100,random.order=F,colors=brewer.pal(8,"Dark2"))
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('C:/Users/LENOVO/Downloads/ngulik_data-master/ngulik_data-master/ngnu.R')
runApp('C:/Users/LENOVO/Downloads/ngulik_data-master/ngulik_data-master/ngnu.R')
runApp('C:/Users/LENOVO/Downloads/ngulik_data-master/ngulik_data-master/ngnu.R')
runApp('kopit.R')
joy
runApp('kopit.R')
runApp('kopit.R')
filter(covidata$X1)
select(covidata$sentiment)
runApp('kopit.R')
str(covidata)
View(bencanaind)
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
length(covidata$sentiment == "fear")
sum(covidata$sentiment == "fear")
sum(covidata$sentiment == "joy")
runApp('kopit.R')
sum(covidata$sentiment == "joy",covidata$sentiment == "sadness")
sum(covidata$sentiment == "joy"covidata$sentiment == "sadness")
runApp('kopit.R')
runApp('kopit.R')
sum(covidata$sentiment == "joy")
positive1
positive
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
sum(covidata$sentiment == ("joy", "trust", "positive"))
sum(covidata$sentiment == "joy", "trust", "positive")
sum(covidata$sentiment = "joy", "trust", "positive")
sum(c(covidata$sentiment = "joy",covidata$sentiment=="trust", covidata$sentiment=="positive"))
sum(covidata$sentiment == "joy")
sum(sum(covidata$sentiment == "joy")(sum(covidata$sentiment == "positive"))
)
sum(covidata$sentiment == "joy", "trust")
sum(covidata$sentiment == "joy"+ covidata$sentiment=="trust")
sum(covidata$sentiment == "joy"+covidata$sentiment=="trust")
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
sum(covidata$sentiment == "joy"
)
runApp('kopit.R')
runApp('kopit.R')
runApp('kopit.R')
library(shiny); runApp('D:/Code/R STUDIO/PDS/CovidSentiment.R')
